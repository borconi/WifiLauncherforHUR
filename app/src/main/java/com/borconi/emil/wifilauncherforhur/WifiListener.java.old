package com.borconi.emil.wifilauncherforhur;

import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.net.ConnectivityManager;
import android.net.DhcpInfo;
import android.net.NetworkInfo;
import android.net.wifi.SupplicantState;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.Handler;
import android.os.IBinder;
import android.preference.PreferenceManager;
import android.util.Log;

import androidx.annotation.RequiresApi;
import androidx.core.app.NotificationCompat;

import static android.app.Notification.EXTRA_NOTIFICATION_ID;
import static android.content.Intent.FLAG_ACTIVITY_NEW_TASK;

public class WifiListener extends Service {
    WifiReceiver mylistener;
    public static boolean isConnected;
    public static boolean havewifi;
    private NotificationManager mNotificationManager;

    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }

    @Override
    public void onCreate(){
        Intent snoozeIntent = new Intent(this, WifiReceiver.class);
        snoozeIntent.setAction("com.borconi.emil.wifilauncherforhur.exit");
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            snoozeIntent.putExtra(EXTRA_NOTIFICATION_ID, 0);
        }
        PendingIntent snoozePendingIntent =
                PendingIntent.getBroadcast(this, 0, snoozeIntent, 0);
        mNotificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O)
            createChannel("main_notification","Headunit Service","Headunit Reloaded Service");

        Notification mynotification = new NotificationCompat.Builder(this, "main_notification")
                .setContentTitle(getString(R.string.app_name))
                .setContentText("Running....")
                .setSmallIcon(R.drawable.aawifi)
                .setPriority(NotificationCompat.PRIORITY_HIGH)
                .setTicker("")
                .setContentIntent(snoozePendingIntent)
                .addAction(R.drawable.ic_exit_to_app_24px,"Exit",snoozePendingIntent)
                .build();

        startForeground(1, mynotification);
    }


    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        IntentFilter filter=new IntentFilter();
        filter.addAction("android.net.wifi.WIFI_STATE_CHANGED");
        filter.addAction("android.net.conn.CONNECTIVITY_CHANGE");
        mylistener=new WifiReceiver();
        registerReceiver(mylistener,filter);
        return START_NOT_STICKY;

    }

    @Override
    public void onDestroy(){
        super.onDestroy();
        try {
            unregisterReceiver(mylistener);
        }
        catch (Exception e){}
        android.os.Process.killProcess(android.os.Process.myPid());
    }


    @RequiresApi(Build.VERSION_CODES.O)
    public void createChannel(String id, CharSequence name, String description) {
        int importance = NotificationManager.IMPORTANCE_LOW;
        NotificationChannel mChannel = new NotificationChannel(id, name, importance);
        // Configure the notification channel.
        mChannel.setDescription(description);
        mChannel.setShowBadge(false);
        mChannel.setLockscreenVisibility(Notification.VISIBILITY_PUBLIC);
        mNotificationManager.createNotificationChannel(mChannel);
        doWifiCheck();
    }

    public String intToIp(int addr) {
        return  ((addr & 0xFF) + "." +
                ((addr >>>= 8) & 0xFF) + "." +
                ((addr >>>= 8) & 0xFF) + "." +
                ((addr >>>= 8) & 0xFF));
    }

    private void doWifiCheck() {


        WifiManager wifii = (WifiManager) getApplicationContext().getSystemService(Context.WIFI_SERVICE);
        assert wifii != null;
        try {
            wifii.startScan();
            wifii.getScanResults();
        }
        catch (Exception e){}



        if (wifii.getConnectionInfo().getSupplicantState()== SupplicantState.COMPLETED)
        {
            String SSID = PreferenceManager.getDefaultSharedPreferences(this).getString("ssid", "");

            String my_ssid = wifii.getConnectionInfo().getSSID();
            if (my_ssid != null) {
                if (my_ssid.startsWith("\"") && my_ssid.endsWith("\""))
                    my_ssid = my_ssid.substring(1, my_ssid.length() - 1);
                if (SSID.equals("") || SSID.equalsIgnoreCase(my_ssid))
                {
                    havewifi = true;
                    try {
                        Thread.sleep(2000); //Add 2 seconds delay sometimes SupplicanState returned to fast.
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }

        }


        if (!havewifi && isConnected) {
            final Handler handler = new Handler();
            handler.postDelayed(new Runnable() {
                @Override
                public void run() {
                    doWifiCheck();
                }
            },500);
        }

        if (isConnected && havewifi) {
            wifii = (WifiManager) getApplicationContext().getSystemService(Context.WIFI_SERVICE);
            assert wifii != null;
            DhcpInfo d = wifii.getDhcpInfo();
            Intent i = new Intent();
            i.setClassName("com.google.android.projection.gearhead", "com.google.android.apps.auto.wireless.setup.service.impl.WirelessStartupActivity");
            i.addFlags(FLAG_ACTIVITY_NEW_TASK);
            i.putExtra("PARAM_HOST_ADDRESS", intToIp(d.gateway)).putExtra("PARAM_SERVICE_PORT", 5288);
            Log.d("BT-RECEIVER", "Starting AA, IP: " + intToIp(d.gateway));
            startActivity(i);
            stopSelf();
        }
    }

    public class WifiReceiver extends BroadcastReceiver {




        @Override
        public void onReceive(Context context, Intent intent) {
            Log.d("HU","REceiver: " + intent.getAction());
            if (intent.getAction()==null)
                return;
            if (intent.getAction().equalsIgnoreCase("com.borconi.emil.wifilauncherforhur.exit"))
            {
                stopSelf();
                return;
            }
            doWifiCheck();


        }
    }
}
